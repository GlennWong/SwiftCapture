name: Release

on:
  release:
    types: [published]

jobs:
  update-homebrew:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          
      - name: Check if version is already updated
        id: check_version
        run: |
          CURRENT_VERSION=$(grep 'version: "' Sources/SwiftCapture/CLI/SwiftCaptureCommand.swift | sed 's/.*version: "\([^"]*\)".*/\1/')
          TARGET_VERSION="${{ steps.version.outputs.version }}"
          
          if [ "$CURRENT_VERSION" = "$TARGET_VERSION" ]; then
            echo "Version already updated to $TARGET_VERSION"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "Version needs update from $CURRENT_VERSION to $TARGET_VERSION"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Update version in source files and recreate tag
        if: steps.check_version.outputs.needs_update == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"
          
          # Delete the existing tag locally and remotely
          git tag -d "$TAG" || true
          git push origin ":refs/tags/$TAG" || true
          
          # Update version in source files
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" release-config.json
          sed -i "s/version: \".*\"/version: \"$VERSION\"/" Sources/SwiftCapture/CLI/SwiftCaptureCommand.swift
          sed -i "s/VERSION=\".*\"/VERSION=\"$VERSION\"/" scripts/build-release.sh
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add release-config.json Sources/SwiftCapture/CLI/SwiftCaptureCommand.swift scripts/build-release.sh
          git commit -m "Auto-update version to $VERSION"
          
          # Push changes and recreate tag
          git push origin HEAD:main
          git tag "$TAG"
          git push origin "$TAG"
          
      - name: Calculate SHA256
        id: sha
        run: |
          URL="https://github.com/${{ github.repository }}/archive/${{ steps.version.outputs.tag }}.tar.gz"
          SHA256=$(curl -sL "$URL" | sha256sum | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          
      - name: Checkout homebrew tap
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/homebrew-swiftcapture
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-swiftcapture
          
      - name: Update Homebrew formula
        run: |
          cd homebrew-swiftcapture
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"
          SHA256="${{ steps.sha.outputs.sha256 }}"
          
          # Update formula
          sed -i "s|url \".*\"|url \"https://github.com/${{ github.repository }}/archive/$TAG.tar.gz\"|" Formula/swiftcapture.rb
          sed -i "s/sha256 \".*\"/sha256 \"$SHA256\"/" Formula/swiftcapture.rb
          
      - name: Commit and push formula update
        run: |
          cd homebrew-swiftcapture
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/swiftcapture.rb
          git commit -m "Release ${{ steps.version.outputs.tag }}: Update formula"
          git push